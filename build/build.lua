-- build.lua autogenerated
_debug = true

Client.OnStart = function()
    _UIKIT = require("uikit")
    _UI = advanced_ui
    
    loading_screen:start()
end

models = {}

textures = {}

data = {}

sounds = {}

other = {}

-- modules

advanced_ui = {}
advanced_ui.version = "0.1"

advanced_ui.init = function(self)
    -- logs to check if everything is ok
    debug.log("-- ADVANCED UI --")
    debug.log("Version: " .. self.version)
    debug.log("Made for NaN-GDK.")
    debug.log("Advanced UI Module initialized.")
end

advanced_ui.createWindow = function(config)
    -- default config
    local defaultConfig = {
        title = "Window",
        title_size = 14,
        width = 300,
        height = 200,
        topbar_height = 20,
        topbar_color = Color(92, 101, 105),
        topbar_text_color = Color(218, 224, 227),
        background_color = Color(200, 216, 224),
        border_color = Color(31, 34, 36),
        border_width = 1,
        pos = {0, 0},
        topbar_buttons = {
            {
                text = "X",
                func = "close",
                size = 14,
                color = Color(237, 66, 24),
                textcolor = Color(255, 255, 255)
            }
        }
    }

    -- config merging
cfg = {}
    for k, v in pairs(defaultConfig) do
        if config[k] ~= nil then
            cfg[k] = config[k]
        else
            cfg[k] = v
        end
    end

    -- creating window
    local window = _UIKIT:createFrame()
    window.left_border = _UIKIT:createFrame()
    window.right_border = _UIKIT:createFrame()
    window.bottom_border = _UIKIT:createFrame()
    window.top_border = _UIKIT:createFrame()

    -- topbar + events
    window.topbar = _UIKIT:createFrame()
    window.title = _UIKIT:createText(cfg.title)
    window.topbar.onPress = function(self, _quad, _idk, pointerEvent)
        debug.log("Pressed top border of window " .. window.config.title)
        debug.log("Position: [X:" .. pointerEvent.X .. ", Y:" .. pointerEvent.Y .. "]")
        self.latest_pointer_position = {X = pointerEvent.X, Y = pointerEvent.Y}
    end
    window.topbar.onRelease = function(self)
        debug.log("Released top border of window " .. window.config.title)
        self.latest_pointer_position = nil
    end
    window.topbar.onDrag = function(self, pointerEvent)
        if self.latest_pointer_position.X ~= nil and self.latest_pointer_position.Y ~= nil then
            local pos_diff = {
                X = (pointerEvent.X - self.latest_pointer_position.X) * window.screen_mult[1],
                Y = (pointerEvent.Y - self.latest_pointer_position.Y) * window.screen_mult[2],
            }
            local final_pos = {
                window.pos.X + pos_diff.X,
                window.pos.Y + pos_diff.Y,
            }
            self.latest_pointer_position = {X = pointerEvent.X, Y = pointerEvent.Y}
            window:setPos(final_pos)
        end
    end

    -- creating topbar buttons
    window.topbar_buttons = {}
    for i, button in ipairs(cfg.topbar_buttons) do
        local btn = _UIKIT:createFrame()
        btn.btn_text = _UIKIT:createText(button.text)
        btn.onRelease = function(self)
            debug.log("Button " .. button.text .. " pressed")
            if button.func == "close" then
                window:close(true)
            end
        end
        table.insert(window.topbar_buttons, btn)
    end

    -- SAVE CONFIG
    window.config = cfg

    -- -- -- FUNCTIONS -- -- --

    window.updateConfig = function(self, config)
        -- merging old config with new one
mergedConfig = {}
        for k, v in pairs(self.config) do
            mergedConfig[k] = v
        end

        -- merging new config with old one
        for k, v in pairs(config) do
            mergedConfig[k] = v
        end

        -- updating config
        self.config = mergedConfig

        -- updating window
        self:update()
    end

    window.setPos = function(self, pos)
        self.config.pos = pos
        self:update()
    end

    window.setSize = function(self, size)
        self.config.width = size[1]
        self.config.height = size[2]
        self:update()
    end

    window.update = function(self)
        -- updating window
        self.Color = self.config.background_color
        self.Size = {self.config.width, self.config.height}
        self.pos = self.config.pos

        -- updating topbar
        self.topbar.Color = self.config.topbar_color
        self.topbar.Size = {self.config.width, self.config.topbar_height}
        self.topbar.pos = {self.pos.X, self.pos.Y + self.config.height - self.topbar.Height}

        -- updating title
        self.title.Color = self.config.topbar_text_color
        self.title.object.FontSize = self.config.title_size
        self.title.pos = {
            self.topbar.pos.X + (self.config.topbar_height-self.config.title_size)/2,
            self.topbar.pos.Y + (self.config.topbar_height-self.config.title_size)/2
        }

        -- updating left border
        self.left_border.Color = self.config.border_color
        self.left_border.Size = {self.config.border_width, self.config.height}
        self.left_border.pos = {self.pos.X-self.config.border_width, self.pos.Y}

        -- updating right border
        self.right_border.Color = self.config.border_color
        self.right_border.Size = {self.config.border_width, self.config.height}
        self.right_border.pos = {self.pos.X+self.config.width, self.pos.Y}

        -- updating bottom border
        self.bottom_border.Color = self.config.border_color
        self.bottom_border.Size = {self.config.width + (self.config.border_width * 2), self.config.border_width}
        self.bottom_border.pos = {self.pos.X- self.config.border_width, self.pos.Y-self.config.border_width}

        -- updating top border
        self.top_border.Color = self.config.border_color
        self.top_border.Size = {self.config.width + (self.config.border_width * 2), self.config.border_width}
        self.top_border.pos = {self.pos.X - self.config.border_width, self.pos.Y + self.config.height}

        -- updating topbar buttons
        for i, btn in ipairs(self.topbar_buttons) do
            btn.btn_text.object.FontSize = self.config.topbar_buttons[i].size
            btn.Width = btn.btn_text.Height + self.config.border_width * 2
            btn.Height = btn.btn_text.Height + self.config.border_width * 2
            btn.Color = self.config.topbar_buttons[i].color
            btn.pos = {
                self.topbar.pos.X + self.config.width - ((btn.Width + self.config.border_width)*i),
                self.topbar.pos.Y + (self.config.topbar_height-btn.Height)/2
            }
            btn.btn_text.pos = {
                btn.pos.X + (btn.Width - btn.btn_text.Width)/2,
                btn.pos.Y + (btn.Height - btn.btn_text.Height)/2
            }
            btn.btn_text.Color = self.config.topbar_buttons[i].textcolor
        end

        self.screen_mult = {Screen.Width, Screen.Height}
    end

    window.destroy = function(self)
        debug.log("Destroying window " .. self.config.title)

        self.left_border:remove()
        self.right_border:remove()
        self.bottom_border:remove()
        self.top_border:remove()
        self.topbar:remove()
        self.title:remove()
        for _, btn in ipairs(self.topbar_buttons) do
            btn.btn_text:remove()
            btn:remove()
        end
        self:remove()
    end

    window.close = function(self, destroy)
        debug.log("Closing window " .. self.config.title)

        if not destroy then
            self.pos = {-1000, -1000}
            self:update()
        else
            self:destroy()
        end
    end

    window:update()
    window._CONTENT = {}

    return window
end

-- Debug module to store logs

debug = {}

function debug.log(text)
    if _debug then
        print("Log: " .. text)
    end
    debug._LOGS[#debug._LOGS+1] = text
end

debug._LOGS = {}

function debug.getLogs()
    local logs = ""

    for _, log in ipairs(debug._LOGS) do
        logs = logs .. log .. "\n"
    end

    Dev:CopyToClipboard(logs)
end

loading_screen = {}

loading_screen.start = function(self)
    debug.log("Loading screen initialized.")

    self.background = _UIKIT:frame()
    self.background.Color = Color(0, 0, 0)
    self.background.Width = Screen.Width
    self.background.Height = Screen.Height

    -- creating game title
    self.game_title = _UIKIT:createText("Convy 2")
    self.title = _UIKIT:createText("Powered by NaN-GDK")
    self.loading_text = _UIKIT:createText("Downloading assets...")

    self.game_title.Color = Color(255, 255, 255)
    self.game_title.object.FontSize = 40
    self.title.Color = Color(255, 255, 255)
    self.title.object.FontSize = 30
    self.loading_text.Color = Color(255, 255, 255)
    self.loading_text.object.FontSize = 20

    self:update()
end

loading_screen.update = function(self)
    local basePos = {Screen.Width/2, Screen.Height/2}
    self.game_title.pos = {
        basePos[1] - self.game_title.Width/2,
        basePos[2] - self.game_title.Height/2 + self.game_title.Height + 5
    }
    self.title.pos = {
        basePos[1] - self.title.Width/2,
        basePos[2] - self.title.Height/2
    }
    self.loading_text.pos = {
        basePos[1] - self.loading_text.Width/2,
        basePos[2] - self.loading_text.Height/2 - self.loading_text.Height - 5
    }
end

loading_screen.loading_text_update = function(self, text)
    if self.loading_text ~= nil then
        self.loading_text.Text = text
    end
end

loading_screen.intro = function(self)
    debug.log("Intro initialized.")

    -- removing game title
    self.game_title:remove()
    self.game_title = nil

    self.title:remove()
    self.title = nil

    self.loading_text:remove()
    self.loading_text = nil

    -- showing intro logo
    self.intro_logo = _UIKIT:createFrame()
    local logo = self.intro_logo
    logo.Color = Color(255, 255, 255)
    logo:setImage(textures.intro_logo)
    logo.Size = {256, 256}
    logo.pos = {
        Screen.Width/2 - logo.Width/2,
        Screen.Height/2 - logo.Height/2
    }

    local o = Object()
    o.tick = 0
    o.Tick = function(self)
        o.tick = o.tick + 1

        -- fading intro logo
        local alpha = 255
        local t = (300-o.tick)/300
        if o.tick < 300 then
            alpha = math.floor(mathlib.lerp(0, 255, t))
        else
            alpha = 0
            self:Destroy()
        end
        logo.Color.A = alpha
        logo.Size = {256+(t*20), 256+(t*20)}
        logo.pos = {
            Screen.Width/2 - logo.Width/2,
            Screen.Height/2 - logo.Height/2
        }
    end

    -- play intro sound
    local sound = AudioSource()
    sound:SetParent(Camera)
    sound.Sound = sounds.intro
    sound:Play()

    Timer(5, false, 
        function()
            sound:Destroy()
            loading_screen:finish()
        end)
end

loading_screen.finish = function(self)
    debug.log("Loading screen removed.")
    self.background:remove()
    self.background = nil

    self.intro_logo:remove()
    self.intro_logo = nil

    -- play loading completed sound
    local sound = AudioSource()
    sound:SetParent(Camera)
    sound.Sound = sounds.loading_completed
    sound:Play()

    Timer(3, false, 
        function()
            sound:Destroy()
        end)
end

mathlib = {}

function mathlib.lerp(a, b, t)
    return a + (b - a) * t
end

worldgen = {}

worldgen.test = function()
    print("he")
end

local to_load = 0 
local loaded = 0

function _log(msg) debug.log(msg) loading_screen.loading_text_update(msg) end
function _check_ready() if loaded >= to_load then _log('All assets loaded') _start_game() end end

to_load = to_load + 1
_log("Downloading textures/intro_logo")
HTTP:Get("https://raw.githubusercontent.com/Nanskip/convy-2/refs/heads/main/source/textures/intro_logo.png", function(res)
    if res.StatusCode == 200 then
        textures.intro_logo = res.Body
        _log("Downloaded textures/intro_logo")
    else
        _log("Failed to download textures/intro_logo: " .. res.StatusCode)
    end
    loaded = loaded + 1
    _check_ready()
end)

to_load = to_load + 1
_log("Downloading sounds/intro")
HTTP:Get("https://raw.githubusercontent.com/Nanskip/convy-2/refs/heads/main/source/sounds/intro.mp3", function(res)
    if res.StatusCode == 200 then
        sounds.intro = res.Body
        _log("Downloaded sounds/intro")
    else
        _log("Failed to download sounds/intro: " .. res.StatusCode)
    end
    loaded = loaded + 1
    _check_ready()
end)

to_load = to_load + 1
_log("Downloading sounds/loading_completed")
HTTP:Get("https://raw.githubusercontent.com/Nanskip/convy-2/refs/heads/main/source/sounds/loading_completed.mp3", function(res)
    if res.StatusCode == 200 then
        sounds.loading_completed = res.Body
        _log("Downloaded sounds/loading_completed")
    else
        _log("Failed to download sounds/loading_completed: " .. res.StatusCode)
    end
    loaded = loaded + 1
    _check_ready()
end)

to_load = to_load + 1
_log("Downloading other/vcr_font")
HTTP:Get("https://raw.githubusercontent.com/Nanskip/convy-2/refs/heads/main/source/other/vcr_font.ttf", function(res)
    if res.StatusCode == 200 then
        other.vcr_font = res.Body
        _log("Downloaded other/vcr_font")
    else
        _log("Failed to download other/vcr_font: " .. res.StatusCode)
    end
    loaded = loaded + 1
    _check_ready()
end)

-- start

function _start_game()
    loading_screen:intro()
    _UI:init()
    end
    
    _ON_START_CLIENT = function()
    _UIKIT = require("uikit")
    _UI = advanced_ui
    
    loading_screen:start()
end

-- hash: 916996080